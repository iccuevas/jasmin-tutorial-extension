param int DECRYPTED_BLOCK_SIZE_QWORDS = 170;

inline
fn _comp_and_swap_64(
  reg u64 rbx r11 r8 rsi
)
{
  reg u64 rcx_1 rax_4 r9_1 rdi_1 rdx r13_1;
  reg u32 edi;
  reg u8 dil al dl;
  reg bool b;
  inline int r;

  rdx = [rbx];
  rcx_1 = [r11];
  rax_4 = [r8 + 8];

  b = [rsi + 8] < rax_4;
  dil = #SETcc(b);
  b = rdx == rcx_1;
  al = #SETcc(b);
  al &= dil;
  b = rdx > rcx_1;
  dl = #SETcc(b);
  al |= dl;

  edi = (32u)al;
  r9_1 = (64u)edi;
  r9_1 -= 1;
  rdi_1 = (64u)edi;
  rdi_1 = -rdi_1;

  // cond_swap_blocks
  for r = 0 to 170 {
    rdx = [r8 + r * 8];
    rcx_1 = [rsi + r * 8];
    r13_1 = rdx;
    rcx_1 &= rdi_1;
    rdx &= rdi_1;
    r13_1 &= r9_1;
    rcx_1 |= r13_1;
    [r8 + r * 8] = rcx_1;
    rcx_1 = [rsi + r * 8];
    rcx_1 &= r9_1;
    rdx |= rcx_1;
    [rsi + r * 8] = rdx;
  }
  // we could use 256-bit registers to perform
  // the swap

  rax_4 = [rbx];
  rdx = [r11];
  rcx_1 = rax_4;
  rdx &= rdi_1;
  rax_4 &= rdi_1;
  rcx_1 &= r9_1;
  rdx |= rcx_1;
  [rbx] = rdx;
  r9_1 &= [r11];
  rax_4 |= r9_1;
  [r11] = rax_4;
}

inline
fn _comp_and_swap_256(
  reg u64 bla0 bla1 b0 b1
)
{
  reg u256 t0 t1 tmp256 mask2 mask3;
  reg u128 r0 r1 tmp128 mask0 mask1;
  reg u64 a b tmp cond0 cond1;
  reg u32 edi;
  reg u8 dil al dl;
  inline int r;
  reg bool cond;
  stack u64 c0_s c1_s;

  a = [bla0];  // block_level_assignments
  b = [bla1];  // block_level_assignments
  tmp = [b0 + 8]; // blocks

  // comp_blocks
  cond = [b1 + 8] < tmp;
  dil = #SETcc(cond);
  cond = a == b;
  al = #SETcc(cond);
  al &= dil;
  cond = a > b;
  dl = #SETcc(cond);
  al |= dl;

  edi = (32u)al;  // cond
  cond0 = (64u)edi;
  cond0 -= 1;
  cond1 = (64u)edi;
  cond1 = -cond1;

  c0_s = cond0;
  c1_s = cond1;
  mask2 = #VPBROADCAST_4u64(c0_s);
  mask3 = #VPBROADCAST_4u64(c1_s);
  // cond_swap_blocks
  for r = 0 to DECRYPTED_BLOCK_SIZE_QWORDS / 4 {
    t0 = (u256)[b0 + r * 32];
    t1 = (u256)[b1 + r * 32];
    tmp256 = t0;
    t1 = #VPAND_256(t1, mask3);
    t0 = #VPAND_256(t0, mask3);
    tmp256 = #VPAND_256(tmp256, mask2);
    t1 = #VPOR_256(t1, tmp256);
    (u256)[b0 + r * 32] = t1;
    t1 = (u256)[b1 + r * 32];
    t1 = #VPAND_256(t1, mask2);
    t0 = #VPOR_256(t0, t1);
    (u256)[b1 + r * 32] = t0;
  }
  mask0 = #VPBROADCAST_2u64(c0_s);
  mask1 = #VPBROADCAST_2u64(c1_s);

  r0 = (u128)[b0 + (DECRYPTED_BLOCK_SIZE_QWORDS / 4) * 32];
  r1 = (u128)[b1 + (DECRYPTED_BLOCK_SIZE_QWORDS / 4) * 32];
  tmp128 = r0;
  r1 = #VPAND_128(r1, mask1);
  r0 = #VPAND_128(r0, mask1);
  tmp128 = #VPAND_128(tmp128, mask0);
  r1 = #VPOR_128(r1, tmp128);
  (u128)[b0 + (DECRYPTED_BLOCK_SIZE_QWORDS / 4) * 32] = r1;
  r1 = (u128)[b1 + (DECRYPTED_BLOCK_SIZE_QWORDS / 4) * 32];
  r1 = #VPAND_128(r1, mask0);
  r0 = #VPOR_128(r0, r1);
  (u128)[b1 + (DECRYPTED_BLOCK_SIZE_QWORDS / 4) * 32] = r0;

  // cond_obv_swap_u64
  tmp = [bla0];
  a = [bla1];
  b = tmp;
  a &= cond1;
  tmp &= cond1;
  b &= cond0;
  a |= b;
  [bla0] = a;
  cond0 &= [bla1];
  tmp |= cond0;
  [bla1] = tmp;
}

export
fn odd_even_msort_jazz(
  reg u64 blocks block_level_assignments lb ub
)
{
  reg u64 n;
  n = ub - lb;
  if (n >= 1) {
    reg u64 current_assignment i remaining r15 next_step;
    reg u64 rsi_0 mask adjusted_range rax r13 rdi block_offset rdx rcx rax_3 pairs_to_process r8 r11 r10 rbx rsi left right rdx rcx_1 rax_4 r9_1 rdi_1 r13_1;
    reg u32 edi;
    reg u8 dil al dl;
    reg bool b;
    inline int r;

    current_assignment = block_level_assignments + lb * 8;
    i = lb;
    remaining = n;
    r15 = 1;
    () = #spill(current_assignment);

    while {
      next_step = r15 * 2;
      rsi_0 = r15;
      rsi_0 -= 1;
      if (r15 != 0) {
        while {
          mask = rsi_0;
          mask &= r15;
          adjusted_range = remaining;
          adjusted_range -= r15;
          if (mask < adjusted_range) {
            rax = r15 * 2720;
            () = #spill(remaining);
            r13 = adjusted_range;
            rdi = #LEA(r15 + r15);
            () = #spill(rsi_0);
            r13 -= mask;
            () = #spill(blocks, rax);
            block_offset = i;
            block_offset += mask;
            block_offset *= 1360;
            () = #spill(block_level_assignments, i, adjusted_range);
            rdx = block_offset + blocks;
            block_offset = r15;
            block_offset += i;
            block_offset = block_level_assignments + block_offset * 8;
            rcx = rdx;
            () = #spill(block_offset);
            rax_3 = r15 * 1360;
            () = #spill(rax_3);

            while {
              pairs_to_process = r13;
              b = r15 < r13;
              pairs_to_process = r15 if b;
              if (pairs_to_process != 0) {
                () = #unspill(current_assignment);
                () = #spill(rdi);
                pairs_to_process += mask;
                r8 = rcx;
                r11 = #LEA(mask * 8);
                () = #spill(rcx);
                r10 = mask;
                rbx = current_assignment;
                () = #unspill(block_offset);
                () = #spill(r13);
                rbx += r11;
                
                r11 += block_offset;
                () = #unspill(rax_3);
                rsi = rax_3;
                rsi += rcx;

                while (r10 != pairs_to_process) {
                  left = r10;
                  left /= next_step;
                  left = left;
                  right = r10;
                  right += r15;
                  right /= next_step;
                  right = right;
                  if (left == right) {
                    // try using `_comp_and_swap_256` instead
                    // and check the results
                    _comp_and_swap_64(rbx, r11, r8, rsi);
                    // _comp_and_swap_256(rbx, r11, r8, rsi);
                  }
                  r10+=1; rbx+=8; r11+=8; rsi+=1360; r8+=1360;
                }
                () = #unspill(rdi);
                () = #unspill(r13);
                () = #unspill(rcx);
              }
              () = #unspill(rax);
              mask += rdi;
              r13 -= rdi;
              rcx += rax;
              () = #unspill(adjusted_range);
            } (mask < adjusted_range)
            () = #unspill(remaining);
            () = #unspill(rsi_0);
            () = #unspill(blocks);
            () = #unspill(block_level_assignments);
            () = #unspill(i);
          }
          r15 >>= 1;
        } (r15 != 0)
      }
      r15 = next_step;
    } (next_step < remaining)
  }
}