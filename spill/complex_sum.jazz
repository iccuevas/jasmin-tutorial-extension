// C ABI convention ensures that the first 6 parameters are
// passed in the following registers rdi, rsi, rdx, rcx, r8, r9.
//
// Therefore, arg1=rdi, arg2=rsi, arg3=rdx, arg4=rcx, arg5=r8, arg6=r9

export
fn register_pressure_jazz(reg u64 rdi rsi rdx rcx r8 r9) -> reg u64
{
  // Now look at `complex_sum.s` and try to implement
  // that function here

  // Registers
  reg u64 rax r11 r15 r12 r13 r10 rbx rbp r14;
  // Stack variables
  stack u64 m8_s m16_s m24_s m32_s m40_s m48_s m56_s m64_s
            m72_s m80_s m88_s m96_s m104_s m112_s m120_s;

  /*
    Exercise: Complete this function.
    The variable names match with the generated assembly
    code from C compiler.

    Remember: there is a one-to-one relation between Jasmin
    code and Assembly. Therefore, each line here represents
    a line in the generated Assembly.
  */
  rbx = #LEA(r15 + r15);
  r8 = #LEA(rbx + r12);
  r14 *= r8;
  r13 = #LEA(r10 - 4);
  rcx = r13;
  /*
    Try spilling `rsi` and use it afterwards
  */
  rsi = rdi;
  m8_s = rdx;
  r11 *= rcx;
  m112_s = rcx;
  rcx = rdx;
  rsi += r14;
  m120_s = r14;
  rdx = r15;
  rdx -= rax;
  m64_s = rdi;
  rcx -= r11;
  m56_s = r8;
  r14 = rcx;
  m104_s = rcx;
  r14 *= rsi;
  rdx -= r14;
  m96_s = r14;
  rbp *= rdx;
  r14 = rdx;
	rdx = r12;
	rdi = #LEA(r10 + rbp);
	m48_s = rbp;
	rbp = r8;
  /*
    Now reload the value stored in `m120_s`, which is a stack
    variable, to r8.
  */
	m80_s = r8;
  r8 = m80_s;
  rdx -= rdi;
	rcx = rdi;
  rdi = m112_s;
	m32_s = rdx;
	rdx += r13;
	rbp *= rdx;
	rdi *= rbp;
	m24_s = rbp;
  rbp = m104_s;
	r8 -= rdi;
	rdi = rax;
  /*
    You can also perform additions with values that are
    in memory. This avoids the use of registers.
  */
  r8 *= rsi;
	rax += r10;
  rax += m72_s;
	rax += r13;
	rax += r9;
	rbp *= r8;
	rax = #LEA(rax + r12 * 2);
	rdi -= rbp;
	m88_s = rbp;
	r14 *= rdi;
	rbp = rdi;
	rdi = r10;
  rdi -= r14;
	rcx *= rdi;
	m16_s = rdi;
	rdi = m32_s;
	rdi += rcx;
  rax += m112_s;
  rax += rbx;
	rax += r11;
  rax += m56_s;
  rax += m104_s;
	rax += rsi;
  rax += m80_s;
  rbx = m24_s;
	rax += m40_s;
	rsi = #LEA(r15 + rbx);
	rax += rdx;
	rdx *= rdi;
	r15 = #LEA(rsi + rsi * 2);
	rax += r15;
	r8 += rax;
  rax = m96_s;
	rax += m120_s;
	r8 += rbp;
  r8 += m16_s;
  rax += m48_s;
	rcx += r8;
  rax += m88_s;
	rax += r14;
	rcx += rdi;
	rax = #LEA(rcx + rax * 2);
  rax -= rdx;

  return rax;
}
